/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Class.*;
import Utilitas.*;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.util.Arrays;
import javafx.stage.Screen;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

public class SearchForm extends javax.swing.JFrame {

    boolean k = false;
    boolean stemm = false;
    double GbestD1, GbestD2, GbestD3, GbestD4, GbestD5, GbestD6, GbestD7, GbestD8, GbestD9, GbestD10 = 0;
    double Pbest;

    double Matrix[][] = new double[4][12];
    double Xposisi[][] = new double[4][12];
    double Matrix_Baru[][] = new double[4][12];

    /**
     * Creates new form SearchForm
     */
    public SearchForm() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        panelGlass1 = new usu.widget.glass.PanelGlass();
        buttonGlass1 = new usu.widget.ButtonGlass();
        buttonGlass2 = new usu.widget.ButtonGlass();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableTerm = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableCosine = new javax.swing.JTable();
        buttonGlass3 = new usu.widget.ButtonGlass();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableSim = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        Clustering = new javax.swing.JTable();
        hh = new javax.swing.JLabel();
        gg = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Stopword = new javax.swing.JCheckBox();
        stemming = new javax.swing.JCheckBox();
        phrase = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableXposisi = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableVelocity = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        weight = new usu.widget.TextBox();
        R_2 = new usu.widget.TextBox();
        C_1 = new usu.widget.TextBox();
        R_1 = new usu.widget.TextBox();
        C_2 = new usu.widget.TextBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        Table_matrik_baru = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        label2 = new usu.widget.Label();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel3jPanel1KeyPressed(evt);
            }
        });
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDesktopPane1.setBackground(new java.awt.Color(0, 102, 102));

        buttonGlass1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        buttonGlass1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/search2.png"))); // NOI18N
        buttonGlass1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonGlass1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGlass1ActionPerformed(evt);
            }
        });

        buttonGlass2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/search.png"))); // NOI18N
        buttonGlass2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonGlass2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGlass2ActionPerformed(evt);
            }
        });

        TableTerm.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        TableTerm.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Term", "Count   Q", "D1", "D2", "D3", "Weight Q", "Weight D1", "Weight D2", "Weight D3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableTerm.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                TableTermComponentShown(evt);
            }
        });
        jScrollPane3.setViewportView(TableTerm);
        if (TableTerm.getColumnModel().getColumnCount() > 0) {
            TableTerm.getColumnModel().getColumn(0).setMinWidth(100);
            TableTerm.getColumnModel().getColumn(0).setMaxWidth(100);
            TableTerm.getColumnModel().getColumn(5).setMinWidth(65);
            TableTerm.getColumnModel().getColumn(5).setMaxWidth(65);
        }

        TableCosine.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        TableCosine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " D ", "Cosine Similarity", "Kategori", "K"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableCosine.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                TableCosineComponentShown(evt);
            }
        });
        jScrollPane2.setViewportView(TableCosine);
        if (TableCosine.getColumnModel().getColumnCount() > 0) {
            TableCosine.getColumnModel().getColumn(2).setHeaderValue("Kategori");
            TableCosine.getColumnModel().getColumn(3).setHeaderValue("K");
        }

        buttonGlass3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/search.png"))); // NOI18N
        buttonGlass3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonGlass3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGlass3ActionPerformed(evt);
            }
        });

        TableSim.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        TableSim.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dok", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "SSE", "1/SSE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableSim.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                TableSimComponentShown(evt);
            }
        });
        jScrollPane4.setViewportView(TableSim);

        Clustering.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        Clustering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cluster D1", "Cluster D3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Clustering.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                ClusteringComponentShown(evt);
            }
        });
        jScrollPane5.setViewportView(Clustering);

        hh.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        hh.setForeground(new java.awt.Color(255, 255, 255));
        hh.setText("STOPWORD         :");

        gg.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        gg.setForeground(new java.awt.Color(255, 255, 255));
        gg.setText("STEMMING          :");

        jLabel1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PHRASE               :");

        Stopword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopwordActionPerformed(evt);
            }
        });

        stemming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stemmingActionPerformed(evt);
            }
        });

        phrase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phraseActionPerformed(evt);
            }
        });

        TableXposisi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "D 1", "D 2", "D 3", "D 4", "D 5", "D 6", "D 7", "D 8", "D 9", "D 10", "Fitness"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableXposisi);

        TableVelocity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "D 1", "D 2", "D 3", "D 4", "D 5", "D 6", "D 7", "D 8", "D 9", "D 10"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(TableVelocity);

        jLabel7.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("C1     :");

        jLabel8.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("R1     :");

        jLabel10.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("R2     :");

        jLabel11.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("W     :");

        jLabel12.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("C2     :");

        Table_matrik_baru.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "", "FITNESS"
            }
        ));
        jScrollPane7.setViewportView(Table_matrik_baru);

        javax.swing.GroupLayout panelGlass1Layout = new javax.swing.GroupLayout(panelGlass1);
        panelGlass1.setLayout(panelGlass1Layout);
        panelGlass1Layout.setHorizontalGroup(
            panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGlass1Layout.createSequentialGroup()
                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelGlass1Layout.createSequentialGroup()
                        .addGap(0, 1687, Short.MAX_VALUE)
                        .addComponent(buttonGlass2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelGlass1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGlass1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelGlass1Layout.createSequentialGroup()
                                        .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(panelGlass1Layout.createSequentialGroup()
                                                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(panelGlass1Layout.createSequentialGroup()
                                                        .addComponent(gg, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(stemming))
                                                    .addGroup(panelGlass1Layout.createSequentialGroup()
                                                        .addComponent(hh, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(Stopword))
                                                    .addGroup(panelGlass1Layout.createSequentialGroup()
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(phrase)))
                                                .addGap(1027, 1027, 1027)
                                                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(buttonGlass3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(buttonGlass1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1245, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(446, 446, 446))
                                    .addGroup(panelGlass1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(906, 906, 906))))
                            .addGroup(panelGlass1Layout.createSequentialGroup()
                                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGlass1Layout.createSequentialGroup()
                                        .addGap(558, 558, 558)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(C_2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(23, 23, 23)
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(R_2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelGlass1Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(21, 21, 21)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(C_1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(R_1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 354, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGlass1Layout.createSequentialGroup()
                                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane7)
                                    .addGroup(panelGlass1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(446, 446, 446)))))
                .addGap(468, 468, 468))
            .addGroup(panelGlass1Layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelGlass1Layout.setVerticalGroup(
            panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGlass1Layout.createSequentialGroup()
                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelGlass1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(buttonGlass2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelGlass1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(phrase)
                            .addGroup(panelGlass1Layout.createSequentialGroup()
                                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(hh, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Stopword)
                                    .addComponent(buttonGlass3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelGlass1Layout.createSequentialGroup()
                                        .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(gg, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(stemming, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(buttonGlass1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(C_1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R_1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(C_2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R_2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelGlass1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(241, 241, 241)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addGap(302, 302, 302))
        );

        jLabel2.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SEARCHING OF WORD");

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(panelGlass1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(365, 365, 365)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(panelGlass1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jDesktopPane1.setLayer(panelGlass1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel3.add(jDesktopPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1380, 740));

        label2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/co.jpg"))); // NOI18N
        label2.setText("label2");
        jPanel3.add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 1, 870, 510));
        jPanel3.add(jProgressBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel3jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel3jPanel1KeyPressed

    }//GEN-LAST:event_jPanel3jPanel1KeyPressed

    private void phraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phraseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phraseActionPerformed

    private void stemmingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stemmingActionPerformed
        if (stemming.isSelected() == true) {
            stemm = true;
        } else {
            stemm = false;
        }
    }//GEN-LAST:event_stemmingActionPerformed

    private void StopwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopwordActionPerformed
        if (Stopword.isSelected() == true) {
            k = true;
        } else {
            k = false;
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_StopwordActionPerformed

    private void ClusteringComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ClusteringComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_ClusteringComponentShown

    private void TableSimComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_TableSimComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_TableSimComponentShown

    private void buttonGlass3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGlass3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonGlass3ActionPerformed

    private void TableCosineComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_TableCosineComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_TableCosineComponentShown

    private void TableTermComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_TableTermComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_TableTermComponentShown

    private void buttonGlass2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGlass2ActionPerformed

        JFileChooser chooser;
        String choosertitle = "";
        int result;

        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //
        if (chooser.showOpenDialog(new FileChoos()) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                    + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                    + chooser.getSelectedFile());
        } else {
            System.out.println("No Selection ");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_buttonGlass2ActionPerformed

    private void buttonGlass1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGlass1ActionPerformed
        // TODO add your handling code here:
        read dir = null;
        OperasiFile files = null;
        String nama[] = null;
        String tampung[] = null;
        Dokumen dLat[] = null;
        StopWord st = null;
        String kategori = null;
        Dokumen dU[] = null;
        HashMapRefDok hMapRefDok = null;
        String terms[] = null;

        //-----------------------------------------------------------------------------------------------------------
        //                  BACA DOKUMEN DALAM DIREKTORI
        //-----------------------------------------------------------------------------------------------------------
        dir = new read();
        files = new OperasiFile();
        try {
            kategori = "DOK";
            dir.listFiles(kategori);
            nama = dir.namaFile();
        } catch (Exception ex) {
            System.out.println("Gagal");
        }

        //-----------------------------------------------------------------------------------------------------------
        //                  PECAH FILE DALAM DIREKTORI
        //-----------------------------------------------------------------------------------------------------------
        File f[] = new File[dir.jumFile()];
        for (int i = 0; i < dir.jumFile(); i++) {
            f[i] = new File("DOK/" + nama[i]);
        }
        tampung = files.BacaSemuaFile(f);
        dLat = new Dokumen[tampung.length];
        // judul masing masing dok latih
        String Dlatjudul[];
        String tempJudul[] = new String[tampung.length];
        for (int i = 0; i < tampung.length; i++) {
            Dlatjudul = tampung[i].split("\n");
            tempJudul[i] = Dlatjudul[0];
            System.out.println("" + tempJudul[i]);
        }

        String kat[] = new String[4];
        kat[0] = "politik";
        kat[1] = "politik";
        kat[2] = "edukasi";
        kat[3] = "edukasi";

        //-----------------------------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------------
        //                  CARI DATA
        //-----------------------------------------------------------------------------------------------------------
        //-----Stop Word
        st = new StopWord();
        Stemmer stemming = new Stemmer();
        //----------------

        if (stemm == true && k == true) {
            for (int i = 0; i < tampung.length; i++) {
                dLat[i] = new Dokumen(i, stemming.setKalimat(st.setKalimat(tampung[i])), kat[i]);
                //            System.out.println(tampung[i]); // untuk nampilin kaliamt dlm file
                //            System.out.println(st.setKalimat(tampung[i])); // sama kayak diatas
            }
        } else if (k == true) {
            for (int i = 0; i < tampung.length; i++) {
                dLat[i] = new Dokumen(i, st.setKalimat(tampung[i]), kat[i]);
                //            System.out.println(tampung[i]); // untuk nampilin kaliamt dlm file
                //            System.out.println(st.setKalimat(tampung[i])); // sama kayak diatas
            }
        } else if (stemm == true) {
            for (int i = 0; i < tampung.length; i++) {
                dLat[i] = new Dokumen(i, stemming.setKalimat(tampung[i]), kat[i]);
                //            System.out.println(tampung[i]); // untuk nampilin kaliamt dlm file
                //            System.out.println(st.setKalimat(tampung[i])); // sama kayak diatas
            }

        } else {

            for (int i = 0; i < tampung.length; i++) {
                dLat[i] = new Dokumen(i, tampung[i], kat[i]);
                //            System.out.println(tampung[i]); // untuk nampilin kaliamt dlm file
                //            System.out.println(st.setKalimat(tampung[i])); // sama kayak diatas
            }

        }

        //---------
        String namaFile[] = null;
        String namaFile2[] = null;
        String namaFile3[] = null;
        try {
            dir.listFiles("UJI");
            namaFile = dir.namaFile();

            dir.listFiles("UJA");
            namaFile2 = dir.namaFile();

            dir.listFiles("UJU");
            namaFile3 = dir.namaFile();

        } catch (Exception ex) {
            System.out.println("Gagal");
        }
        //---------------------------------

        File Uji[] = new File[dir.jumFile()];
        for (int i = 0; i < dir.jumFile(); i++) {
            Uji[i] = new File("UJI/" + namaFile[i]);
        }

        File Uji2[] = new File[dir.jumFile()];
        for (int i = 0; i < dir.jumFile(); i++) {
            Uji2[i] = new File("UJA/" + namaFile2[i]);
        }

        File Uji3[] = new File[dir.jumFile()];
        for (int i = 0; i < dir.jumFile(); i++) {
            Uji3[i] = new File("UJU/" + namaFile3[i]);
        }

        //---------------------------------------
        String tempUji[] = files.BacaSemuaFile(Uji);
        String tempUji2[] = files.BacaSemuaFile(Uji2);
        String tempUji3[] = files.BacaSemuaFile(Uji3);

        dU = new Dokumen[tempUji.length];
        Dokumen[] dU2 = new Dokumen[tempUji2.length];
        Dokumen[] dU3 = new Dokumen[tempUji3.length];

        for (int i = 0; i < tempUji2.length; i++) {
            dU[i] = new Dokumen(i, tempUji[i]);
            dU2[i] = new Dokumen(i, tempUji2[i]);
            dU3[i] = new Dokumen(i, tempUji3[i]);
            //            System.out.println(tampung[i]); // untuk nampilin kaliamt dlm file
            //            System.out.println(st.setKalimat(tampung[i])); // sama kayak diatas
        }

        // ---------------------ULANG UJI
        hasSim(0, dLat, dU2);
        hasSim(1, dLat, dU);
        hasSim(2, dLat, dU3);

        //velocity
        velocity();
        // BELUM URUT
        //        JUDUL.setText(tempJudul[idJudul[0]]);
        //        KATEGORIUJI.setText(dLat[0].getKat());
        //-----------------------------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------------        // TODO add your handling code here:
    }//GEN-LAST:event_buttonGlass1ActionPerformed

    public void hasSim(int l, Dokumen[] dLat, Dokumen[] dU) {
        String terms[] = null;

        HashMapRefDok hMapRefDok = new HashMapRefDok(dLat, dU);
        HashMapRefDok hd = new HashMapRefDok(dLat, dU);

        Matrik mdf, mwi, mtfLatih, mtfUji, mwiUji, sim;
        mdf = hMapRefDok.getMTF();
        mwi = hMapRefDok.getMWi();
        mtfUji = hMapRefDok.getMtfUji();
        mtfLatih = hMapRefDok.getMTF();
        mwiUji = hMapRefDok.getMWiUji();

        //            System.out.println(mtfLatih.cetak());//"Matrik Frekuensi Data Latih"
        System.out.println(mtfUji.cetak());//"Matrik Frekuensi Data Uji"

        //          System.out.println(mwi.cetak());//"Matrik Mwi(weights) Data Latihi"
        //        System.out.println(mwiUji.cetak());//"Matrik Mwi(weights) Data Uji"
        double akar = 0;

        //-----------------------------------------------------------------------------------------------------------
        //                  TAMPILKAN DATA YANG DICARI KE TABEL
        //-----------------------------------------------------------------------------------------------------------
        DefaultTableModel model = (DefaultTableModel) TableTerm.getModel();
        terms = hMapRefDok.getTermUnik();
        double frekD1[] = new double[terms.length];
        double frekD2[] = new double[terms.length];
        double frekD3[] = new double[terms.length];
        double frekQuery[] = new double[terms.length];
        double weightD1[] = new double[terms.length];
        double weightD2[] = new double[terms.length];
        double weightD3[] = new double[terms.length];
        double weightQ[] = new double[terms.length];

        for (int i = 0; i < terms.length; i++) {

            frekD1[i] = mtfLatih.getDt(i, 0);
            frekD2[i] = mtfLatih.getDt(i, 1);
            frekD3[i] = mtfLatih.getDt(i, 2);
            frekQuery[i] = mtfUji.getDt(i, 0);
            weightQ[i] = mwiUji.getDt(i, 0);
            weightD1[i] = mwi.getDt(i, 0);
            weightD2[i] = mwi.getDt(i, 1);
            weightD3[i] = mwi.getDt(i, 2);
        }
        // MENAMPILKAN DATA TERURUT KE TABEL
        Object[] rowData = new Object[9];
        model.setRowCount(0);
        for (int x = 0; x < terms.length; x++) {
            rowData[0] = terms[x];
            rowData[1] = frekQuery[x];
            rowData[2] = frekD1[x];
            rowData[3] = frekD2[x];
            rowData[4] = frekD3[x];
            rowData[5] = weightQ[x];
            rowData[6] = weightD1[x];
            rowData[7] = weightD2[x];
            rowData[8] = weightD3[x];
            model.addRow(rowData);
        }
        DefaultTableModel cosin = (DefaultTableModel) TableCosine.getModel();
        int o = mwi.getnBaris();
        int p = mwi.getnKolom();

        double beratLatih[][] = new double[o][p];
        for (int i = 0; i < o; i++) {
            for (int j = 0; j < p; j++) {

                beratLatih[i][j] = mwi.getDt(i, j);
                akar += beratLatih[i][j];
            }
        }

        //------------------------- BOBOT Latih ------------------
        int baris = mwiUji.getnBaris();
        int kolom = mwiUji.getnKolom();

        double beratUji[][] = new double[baris][kolom];
        for (int i = 0; i < baris; i++) {
            for (int j = 0; j < kolom; j++) {

                beratUji[i][j] = mwiUji.getDt(i, j);
            }
        }
        //------------KUADRAT LATIH-------------------------------
        double kuadrat[][] = new double[o][p];

        for (int i = 0; i < o; i++) {
            for (int j = 0; j < p; j++) {
                kuadrat[i][j] = beratLatih[i][j] * beratLatih[i][j];

            }
        }
        //------------KUADRAT UJI-------------------------------
        double kuadratUJI[][] = new double[baris][kolom];
        for (int i = 0; i < baris; i++) {
            for (int j = 0; j < kolom; j++) {
                kuadratUJI[i][j] = beratUji[i][j] * beratUji[i][j];

            }
        }

        double jum[] = new double[p];
        double akarDokLAt[] = new double[p];
        for (int i = 0; i < p; i++) {
            for (int j = 0; j < o; j++) {
                jum[i] = jum[i] + kuadrat[j][i];
                akarDokLAt[i] = jum[i];
            }
            akarDokLAt[i] = Math.sqrt(akarDokLAt[i]);
        }

        double jumDokUJi[] = new double[kolom];
        double akarDokUji[] = new double[kolom];
        for (int i = 0; i < kolom; i++) {
            for (int j = 0; j < baris; j++) {
                jumDokUJi[i] = jumDokUJi[i] + kuadratUJI[j][i];
                akarDokUji[i] = jumDokUJi[i];
            }
            akarDokUji[i] = Math.sqrt(akarDokUji[i]);
        }

        double tampQ_D[] = new double[4];
        for (int i = 0; i < p; i++) {
            for (int j = 0; j < o; j++) {
                tampQ_D[i] += beratUji[j][0] * beratLatih[j][i];
            }
        }

        double cosTeta[] = new double[4];
        String dokName[] = new String[4];
        int idJudul[] = new int[4];
        String K[] = new String[4];
        Object[] rowData1 = new Object[5];
        cosin.setRowCount(0);
        for (int i = 0; i < p; i++) {
            cosTeta[i] = tampQ_D[i] / (akarDokUji[0] * akarDokLAt[i]);
            dokName[i] = "D" + (i + 1);
            K[i] = "" + (i + 1);
            idJudul[i] = i;
        }
        double temp;
        int tempIDjudul;
        String tempText;
        for (int i = 0; i < cosTeta.length - 1; i++) {

            for (int j = 1; j < cosTeta.length - i; j++) {
                if (cosTeta[j - 1] < cosTeta[j]) {
                    temp = cosTeta[j - 1];
                    tempText = dokName[j - 1];
                    tempIDjudul = idJudul[j - 1];

                    cosTeta[j - 1] = cosTeta[j];
                    dokName[j - 1] = dokName[j];
                    idJudul[j - 1] = idJudul[j];

                    cosTeta[j] = temp;
                    dokName[j] = tempText;
                    idJudul[j] = tempIDjudul;
                }
            }

            // System.out.println((i+1)+"th iteration result: "+Arrays.toString(cosTeta));
        }

        for (int i = 0; i < p; i++) {
            rowData1[0] = dokName[i];
            rowData1[1] = cosTeta[i];
            rowData1[2] = dLat[i].getKat();
            rowData1[3] = K[i];
            cosin.addRow(rowData1); // BELUM URUT
        }

        Object[] rowDataSim = new Object[13];
        DefaultTableModel tabSim = (DefaultTableModel) TableSim.getModel();
        double x = 0;
        for (int i = 0; i < p; i++) {
            Matrix[l][i] = cosTeta[i];

            rowDataSim[0] = "D" + (l + 1);
            rowDataSim[i + 1] = cosTeta[i];
            x = x + Math.pow(cosTeta[i], 2);
            rowDataSim[11] = x;
            rowDataSim[12] = 1 / x;
            Matrix[l][11] = 1 / x;

        }

        tabSim.addRow(rowDataSim);

        //-------- cLUSTER
        Object[] rowDataCluster = new Object[5];
        DefaultTableModel tabCluster = (DefaultTableModel) Clustering.getModel();

        for (int i = 0; i < p; i++) {
            GbestD1 = Math.max(GbestD1, cosTeta[0]);
            GbestD2 = Math.max(GbestD2, cosTeta[1]);
            GbestD3 = Math.max(GbestD3, cosTeta[2]);
            GbestD4 = Math.max(GbestD4, cosTeta[3]);
            GbestD5 = Math.max(GbestD5, cosTeta[0]);
            GbestD6 = Math.max(GbestD6, cosTeta[0]);
            GbestD7 = Math.max(GbestD7, cosTeta[0]);
            GbestD8 = Math.max(GbestD8, cosTeta[0]);
            GbestD9 = Math.max(GbestD9, cosTeta[0]);
            GbestD10 = Math.max(GbestD10, cosTeta[0]);

            if (cosTeta[0] > cosTeta[2]) {

                rowDataCluster[0] = "D" + (l + 1);

            } else {
                rowDataCluster[1] = "D" + (l + 1);
            }

        }

        tabCluster.addRow(rowDataCluster);

    }

    public void velocity() {
        double gbest[] = {GbestD1, GbestD2, GbestD3, GbestD4, GbestD5, GbestD6, GbestD7, GbestD8, GbestD9, GbestD10};
        Object[] rowDatavelocity = new Object[12];
        DefaultTableModel tabvelocity = (DefaultTableModel) TableVelocity.getModel();
        
        Object[] rowDataxposisi = new Object[12];
        DefaultTableModel tabxposisi = (DefaultTableModel) TableXposisi.getModel();
        
        
        Object[] rowDataMatrix_baru = new Object[12];
        DefaultTableModel tabMatrixBaru = (DefaultTableModel) Table_matrik_baru.getModel();
        
        double C1 = 0.3;
        double C2 = 0.7;
        double r1 = 0.2;
        double r2 = 0.8;
        double wmin = 10;
        double wmax = 100;
        double tmax = 100;
        double W;
        double Vt[][] = new double[3][10];
        C_1.setText(String.valueOf(C1));
        C_2.setText(String.valueOf(C2));
        R_1.setText(String.valueOf(r1));
        R_2.setText(String.valueOf(r2));
        
        for (int i = 0; i < 1; i++) {

            W = (wmin + (wmax - wmin) * (tmax - (i + 1)) / tmax);
            weight.setText(String.valueOf(W));

        //-------------- Velocity
            for (int k = 0; k < 3; k++) {

                for (int l = 0; l < 4; l++) {

                    Vt[k][l] = W * 0 + (C1 * r1 * (Matrix[k][l] - Matrix[k][l])) + (C2 * r2 * (gbest[l] - Matrix[k][l]));
                   
                    rowDatavelocity[l]=Vt[k][l];
                    
        
                    Xposisi[k][l] = Matrix[k][l] + Vt[k][l];
                  rowDataxposisi[l]=Xposisi[k][l];    
                                     
                    Xposisi[k][11] += Math.pow(Xposisi[k][l], 2);

                }tabvelocity.addRow(rowDatavelocity);
                 Xposisi[k][11] = 1 / Xposisi[k][11];
                 rowDataxposisi[10]=Xposisi[k][11];
                tabxposisi.addRow(rowDataxposisi);
        
                

            }
            
            for (int j = 0; j < 3; j++) {
                for (int l = 0; l < 4; l++) {
                   
                    if (Xposisi[j][11] > Matrix[j][11]) {
                        Matrix_Baru[j][l] = Xposisi[j][l];
                         rowDataMatrix_baru[l]=Matrix_Baru[j][l];    
                        
                                     
                    } else {
                        Matrix_Baru[j][l] = Matrix[j][l];
                        
                          rowDataMatrix_baru[l]=Matrix_Baru[j][l];
                        
                    }
                    
                Matrix_Baru[j][11]+=Math.pow(Matrix_Baru[j][l], 2);
                }
                rowDataMatrix_baru[11]=1/Matrix_Baru[j][11];
                tabMatrixBaru.addRow(rowDataMatrix_baru);
            }

        }

        System.out.println("" + GbestD1);
        System.out.println("" + GbestD2);
        System.out.println("" + GbestD3);
        System.out.println("" + GbestD4);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SearchForm kkk = new SearchForm();
                kkk.setVisible(true);
                kkk.setSize(1400, 800);
                Dimension posisi = Toolkit.getDefaultToolkit().getScreenSize();

                int x = (posisi.width - kkk.getWidth()) / 2;

                int y = (posisi.height - kkk.getHeight()) / 2;

                kkk.setLocation(x, y);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private usu.widget.TextBox C_1;
    private usu.widget.TextBox C_2;
    private javax.swing.JTable Clustering;
    private usu.widget.TextBox R_1;
    private usu.widget.TextBox R_2;
    private javax.swing.JCheckBox Stopword;
    private javax.swing.JTable TableCosine;
    private javax.swing.JTable TableSim;
    private javax.swing.JTable TableTerm;
    private javax.swing.JTable TableVelocity;
    private javax.swing.JTable TableXposisi;
    private javax.swing.JTable Table_matrik_baru;
    private usu.widget.ButtonGlass buttonGlass1;
    private usu.widget.ButtonGlass buttonGlass2;
    private usu.widget.ButtonGlass buttonGlass3;
    private javax.swing.JLabel gg;
    private javax.swing.JLabel hh;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private usu.widget.Label label2;
    private usu.widget.glass.PanelGlass panelGlass1;
    private javax.swing.JCheckBox phrase;
    private javax.swing.JCheckBox stemming;
    private usu.widget.TextBox weight;
    // End of variables declaration//GEN-END:variables
}
